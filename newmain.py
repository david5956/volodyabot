import telebot
from telebot import types
import os
import logging
from config import PAYMENT_TOKEN, ADMIN_ID

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    filename='bot.log',
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(os.getenv('TELEGRAM_TOKEN'))

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def log_user_action(message, action):
    user = message.from_user
    logger.info(f"UserID:{user.id} ChatID:{message.chat.id} Username:@{user.username} - {action}")

def log_user_error(message, error):
    user = message.from_user
    logger.error(f"UserID:{user.id} ChatID:{message.chat.id} Username:@{user.username} - ERROR: {error}")

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ü–µ–Ω—ã
orders = {}
prices = {
    '—á–±': {'–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è': 10, '–¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω—è—è': 15},
    '—Ü–≤–µ—Ç–Ω–∞—è': {'–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è': 20, '–¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω—è—è': 30},
    '—Ñ–æ—Ä–º–∞—Ç': {'A5': 1, 'A4': 1.5, 'A3': 2, 'A2': 3}
}

# ===== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =====
@bot.message_handler(commands=['start'])
def start(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('üñ® –ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑')
        bot.send_message(
            message.chat.id,
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –ø–µ—á–∞—Ç–∏ –æ—Ç –í–æ–ª–æ–¥–∏!",
            reply_markup=markup
        )
        log_user_action(message, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
    except Exception as e:
        log_user_error(message, f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {str(e)}")

# ===== –°–ò–°–¢–ï–ú–ê –ó–ê–ö–ê–ó–ê =====
@bot.message_handler(func=lambda m: m.text == 'üñ® –ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑')
def start_order(message):
    try:
        chat_id = message.chat.id
        orders[chat_id] = {}
        ask_color_type(message)
        log_user_action(message, "–ù–∞—á–∞–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞")
    except Exception as e:
        log_user_error(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∑–∞–∫–∞–∑–∞: {str(e)}")

def ask_color_type(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ß–µ—Ä–Ω–æ-–±–µ–ª–∞—è', '–¶–≤–µ—Ç–Ω–∞—è')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—á–∞—Ç–∏:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in ['–ß–µ—Ä–Ω–æ-–±–µ–ª–∞—è', '–¶–≤–µ—Ç–Ω–∞—è'])
def select_color_type(message):
    try:
        chat_id = message.chat.id
        color_type = '—á–±' if message.text == '–ß–µ—Ä–Ω–æ-–±–µ–ª–∞—è' else '—Ü–≤–µ—Ç–Ω–∞—è'
        orders[chat_id]['type'] = color_type
        log_user_action(message, f"–í—ã–±—Ä–∞–ª —Ç–∏–ø –ø–µ—á–∞—Ç–∏: {color_type}")
        ask_page_count(message)
    except Exception as e:
        log_user_error(message, f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–µ—á–∞—Ç–∏: {str(e)}")

def ask_page_count(message):
    try:
        markup = types.ReplyKeyboardRemove()
        msg = bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü (—á–∏—Å–ª–æ):",
            reply_markup=markup
        )
        bot.register_next_step_handler(msg, process_page_count)
    except Exception as e:
        log_user_error(message, f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü: {str(e)}")

def process_page_count(message):
    try:
        chat_id = message.chat.id
        page_count = int(message.text)
        if page_count <= 0:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü")
        
        orders[chat_id]['page_count'] = page_count
        log_user_action(message, f"–£–∫–∞–∑–∞–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {page_count}")
        ask_format(message)
    except Exception as e:
        log_user_error(message, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü: {str(e)}")
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")
        ask_page_count(message)

def ask_format(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('A5', 'A4', 'A3', 'A2')
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –±—É–º–∞–≥–∏:",
            reply_markup=markup
        )
    except Exception as e:
        log_user_error(message, f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –±—É–º–∞–≥–∏: {str(e)}")

@bot.message_handler(func=lambda m: m.text in ['A5', 'A4', 'A3', 'A2'])
def select_format(message):
    try:
        chat_id = message.chat.id
        paper_format = message.text
        orders[chat_id]['format'] = paper_format
        log_user_action(message, f"–í—ã–±—Ä–∞–ª —Ñ–æ—Ä–º–∞—Ç –±—É–º–∞–≥–∏: {paper_format}")
        
        if orders[chat_id]['page_count'] > 1:
            ask_side_type(message)
        else:
            ask_file(message)
    except Exception as e:
        log_user_error(message, f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –±—É–º–∞–≥–∏: {str(e)}")

def ask_side_type(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–û–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è', '–î–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω—è—è')
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—á–∞—Ç–∏:",
            reply_markup=markup
        )
    except Exception as e:
        log_user_error(message, f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ç–∏–ø–∞ –ø–µ—á–∞—Ç–∏: {str(e)}")

@bot.message_handler(func=lambda m: m.text in ['–û–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è', '–î–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω—è—è'])
def select_side_type(message):
    try:
        chat_id = message.chat.id
        side_type = message.text.lower()
        orders[chat_id]['side'] = side_type
        log_user_action(message, f"–í—ã–±—Ä–∞–ª —Ç–∏–ø –ø–µ—á–∞—Ç–∏: {side_type}")
        ask_file(message)
    except Exception as e:
        log_user_error(message, f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–µ—á–∞—Ç–∏: {str(e)}")

def ask_file(message):
    try:
        markup = types.ReplyKeyboardRemove()
        msg = bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø–µ—á–∞—Ç–∏ (PDF, DOCX, JPG):"
        )
        bot.register_next_step_handler(msg, process_file)
    except Exception as e:
        log_user_error(message, f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ñ–∞–π–ª–∞: {str(e)}")

def process_file(message):
    try:
        chat_id = message.chat.id
        if message.document:
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            
            orders[chat_id]['file'] = {
                'file_name': message.document.file_name,
                'file_id': message.document.file_id
            }
            log_user_action(message, f"–ó–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª: {message.document.file_name}")
            ask_comment(message)
        else:
            bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª!")
            ask_file(message)
    except Exception as e:
        log_user_error(message, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")

def ask_comment(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')
        msg = bot.send_message(
            message.chat.id,
            "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É?",
            reply_markup=markup
        )
        bot.register_next_step_handler(msg, process_comment)
    except Exception as e:
        log_user_error(message, f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {str(e)}")

def process_comment(message):
    try:
        chat_id = message.chat.id
        if message.text != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            orders[chat_id]['comment'] = message.text
            log_user_action(message, f"–î–æ–±–∞–≤–∏–ª –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.text}")
        else:
            log_user_action(message, "–ü—Ä–æ–ø—É—Å—Ç–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
        
        show_order_summary(message)
    except Exception as e:
        log_user_error(message, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {str(e)}")

def show_order_summary(message):
    try:
        chat_id = message.chat.id
        order = orders[chat_id]
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        base_price = prices[order['type']].get(order.get('side', '–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è'), 10)
        format_multiplier = prices['—Ñ–æ—Ä–º–∞—Ç'][order['format']]
        total = base_price * order['page_count'] * format_multiplier
        
        text = (f"üìù –í–∞—à –∑–∞–∫–∞–∑:\n"
               f"–¢–∏–ø: {order['type']}\n"
               f"–°—Ç—Ä–∞–Ω–∏—Ü: {order['page_count']}\n"
               f"–§–æ—Ä–º–∞—Ç: {order['format']}\n")
        
        if order.get('side'):
            text += f"–¢–∏–ø –ø–µ—á–∞—Ç–∏: {order['side']}\n"
        
        text += f"–§–∞–π–ª: {order['file']['file_name']}\n"
        
        if order.get('comment'):
            text += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order['comment']}\n"
        
        text += f"\n–ò—Ç–æ–≥–æ: {total} —Ä—É–±."
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
        bot.send_message(chat_id, text, reply_markup=markup)
        
        log_user_action(message, f"–ü–æ–∫–∞–∑–∞–ª –∏—Ç–æ–≥ –∑–∞–∫–∞–∑–∞. –°—É–º–º–∞: {total} —Ä—É–±.")
    except Exception as e:
        log_user_error(message, f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏—Ç–æ–≥–æ–≤ –∑–∞–∫–∞–∑–∞: {str(e)}")

# ===== –û–ü–õ–ê–¢–ê –ò –ö–û–†–ó–ò–ù–ê =====
@bot.message_handler(func=lambda m: m.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑')
def confirm_order(message):
    try:
        chat_id = message.chat.id
        order = orders.get(chat_id)
        
        if not order:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        base_price = prices[order['type']].get(order.get('side', '–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è'), 10)
        format_multiplier = prices['—Ñ–æ—Ä–º–∞—Ç'][order['format']]
        total = int(base_price * order['page_count'] * format_multiplier * 100)  # –í–∞–∂–Ω–æ: —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        provider_token =PAYMENT_TOKEN  
        
        bot.send_invoice(
            chat_id,
            title="–û–ø–ª–∞—Ç–∞ –ø–µ—á–∞—Ç–∏",
            description=f"{order['type']} –ø–µ—á–∞—Ç—å, {order['format']}",
            invoice_payload=f"order_{chat_id}",
            provider_token=provider_token,
            start_parameter="print_order",
            currency="RUB",
            prices=[types.LabeledPrice("–ü–µ—á–∞—Ç—å", total)],
            need_email=True,
            need_phone_number=True
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {str(e)}", exc_info=True)
        bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ–º.")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–µ–±–µ
        bot.send_message(
            931928744,  # –í–∞—à ID
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã —É @{message.from_user.username}:\n{str(e)}"
        )

@bot.pre_checkout_query_handler(func=lambda query: True)
def process_pre_checkout(pre_checkout_query):
    try:
        user_id = pre_checkout_query.from_user.id
        if user_id in orders:
            bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
            logger.info(f"UserID:{user_id} - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω pre-checkout –∑–∞–ø—Ä–æ—Å")
        else:
            bot.answer_pre_checkout_query(pre_checkout_query.id, ok=False,
                                      error_message="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª")
            logger.error(f"UserID:{user_id} - –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π pre-checkout –∑–∞–ø—Ä–æ—Å")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ pre-checkout: {str(e)}")
        bot.answer_pre_checkout_query(pre_checkout_query.id, ok=False,
                                  error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@bot.message_handler(content_types=['successful_payment'])
def process_successful_payment(message):
    try:
        chat_id = message.chat.id
        order = orders.get(chat_id)
        
        if not order:
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            log_user_error(message, "–û–ø–ª–∞—Ç–∞ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞")
            return
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
        base_price = prices[order['type']].get(order.get('side', '–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è'), 10)
        format_multiplier = prices['—Ñ–æ—Ä–º–∞—Ç'][order['format']]
        total = base_price * order['page_count'] * format_multiplier
        
        email = message.successful_payment.order_info.email or "–Ω–µ —É–∫–∞–∑–∞–Ω"
        phone = getattr(message.successful_payment.order_info, 'phone_number', "–Ω–µ —É–∫–∞–∑–∞–Ω")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(
            chat_id,
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
            f"–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n"
            f"–¢–∏–ø: {order['type']}\n"
            f"–°—Ç–æ—Ä–æ–Ω—ã: {order['side']}\n"
            f"–°—É–º–º–∞: {total} —Ä—É–±.\n"
            f"Email: {email}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
            f"–í–∞—à –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ —Ä–∞–±–æ—Ç—É!",
            reply_markup=types.ReplyKeyboardRemove()
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É 
        owner_id = ADMIN_ID
        bot.send_message(
            owner_id,
            f"üí∞ –ù–æ–≤—ã–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑!\n"
            f"–û—Ç: @{message.from_user.username}\n"
            f"–¢–∏–ø: {order['type']}\n"
            f"–°—Ç–æ—Ä–æ–Ω—ã: {order['side']}\n"
            f"–°—É–º–º–∞: {total} —Ä—É–±.\n"
            f"Email: {email}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"ID –ø–ª–∞—Ç–µ–∂–∞: {message.successful_payment.telegram_payment_charge_id}"
        )
        
        log_user_action(message, f"–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞. –°—É–º–º–∞: {total} —Ä—É–±.")
        
        # –û—á–∏—Å—Ç–∫–∞ –∑–∞–∫–∞–∑–∞
        if chat_id in orders:
            del orders[chat_id]
    except Exception as e:
        log_user_error(message, f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç—ã: {str(e)}")

@bot.message_handler(func=lambda m: m.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
def cancel_order(message):
    try:
        chat_id = message.chat.id
        if chat_id in orders:
            del orders[chat_id]
        bot.send_message(chat_id, "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=types.ReplyKeyboardRemove())
        start(message)
        log_user_action(message, "–û—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑")
    except Exception as e:
        log_user_error(message, f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞: {str(e)}")

@bot.message_handler(func=lambda m: m.text == '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å')
def edit_order(message):
    try:
        chat_id = message.chat.id
        if chat_id in orders:
            del orders[chat_id]
        start_order(message)
        log_user_action(message, "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞")
    except Exception as e:
        log_user_error(message, f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {str(e)}")

if __name__ == '__main__':
    logger.info("===== –ë–û–¢ –ó–ê–ü–£–©–ï–ù =====")
    bot.polling(none_stop=True)