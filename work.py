import telebot
from telebot import types
import os
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
logging.basicConfig(level=logging.INFO, filename='bot.log', 
                   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

bot = telebot.TeleBot(os.getenv('TELEGRAM_TOKEN'))

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (–≤—Ä–µ–º–µ–Ω–Ω–∞—è)
orders = {}
prices = {
    '—á–±': {'–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è': 10, '–¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω—è—è': 15},
    '—Ü–≤–µ—Ç–Ω–∞—è': {'–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è': 20, '–¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω—è—è': 30}
}

# ===== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =====
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('üñ® –ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑')
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å –ø–µ—á–∞—Ç–∏ –æ—Ç –í–æ–ª–æ–¥–∏!", reply_markup=markup)

# ===== –°–ò–°–¢–ï–ú–ê –ó–ê–ö–ê–ó–ê =====
@bot.message_handler(func=lambda m: m.text == 'üñ® –ù–∞—á–∞—Ç—å –∑–∞–∫–∞–∑')
def start_order(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–ß–µ—Ä–Ω–æ-–±–µ–ª–∞—è', '–¶–≤–µ—Ç–Ω–∞—è')
    markup.add('üõí –ö–æ—Ä–∑–∏–Ω–∞')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—á–∞—Ç–∏:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in ['–ß–µ—Ä–Ω–æ-–±–µ–ª–∞—è', '–¶–≤–µ—Ç–Ω–∞—è'])
def select_side(message):
    color_type = '—á–±' if message.text == '–ß–µ—Ä–Ω–æ-–±–µ–ª–∞—è' else '—Ü–≤–µ—Ç–Ω–∞—è'
    orders[message.chat.id] = {'type': color_type}
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('–û–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è', '–î–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω—è—è')
    markup.add('‚Ü© –ù–∞–∑–∞–¥')
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—á–∞—Ç–∏:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text in ['–û–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è', '–î–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω—è—è'])
def confirm_order(message):
    chat_id = message.chat.id
    side_type = '–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è' if message.text == '–û–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è' else '–¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω—è—è'
    
    orders[chat_id]['side'] = side_type
    price = prices[orders[chat_id]['type']][side_type]
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
    markup.add('üõí –ö–æ—Ä–∑–∏–Ω–∞')
    
    bot.send_message(chat_id, 
                   f"–í–∞—à –≤—ã–±–æ—Ä:\n"
                   f"–¢–∏–ø: {orders[chat_id]['type']}\n"
                   f"–°—Ç–æ—Ä–æ–Ω—ã: {side_type}\n"
                   f"–¶–µ–Ω–∞: {price} —Ä—É–±.\n\n"
                   f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?", reply_markup=markup)

# ===== –ö–û–†–ó–ò–ù–ê –ò –û–ü–õ–ê–¢–ê =====
@bot.message_handler(func=lambda m: m.text in ['üõí –ö–æ—Ä–∑–∏–Ω–∞', '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑'])
def show_cart(message):
    chat_id = message.chat.id
    if chat_id not in orders or not orders[chat_id]:
        bot.send_message(chat_id, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return
    
    order = orders[chat_id]
    price = prices[order['type']][order['side']]
    
    text = (f"–¢–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑:\n"
           f"–¢–∏–ø –ø–µ—á–∞—Ç–∏: {order['type']}\n"
           f"–°—Ç–æ—Ä–æ–Ω—ã: {order['side']}\n"
           f"–ò—Ç–æ–≥–æ: {price} —Ä—É–±.")
    
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add('üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑', '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å')
    markup.add('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
    bot.send_message(chat_id, text, reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑')
def process_payment(message):
    chat_id = message.chat.id
    if chat_id not in orders:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    order = orders[chat_id]
    price = prices[order['type']][order['side']] * 100  # –í –∫–æ–ø–µ–π–∫–∞—Ö
    
    try:
        bot.send_invoice(
            chat_id,
            title="–û–ø–ª–∞—Ç–∞ –ø–µ—á–∞—Ç–∏",
            description=f"{order['type']} –ø–µ—á–∞—Ç—å, {order['side']}",
            invoice_payload=f"order_{chat_id}",
            provider_token="1744374395:TEST:f7c0d8d60430fdf930fe",  # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
            start_parameter="print_order",
            currency="RUB",
            prices=[types.LabeledPrice("–ü–µ—á–∞—Ç—å", price)],
            need_email=True,
            need_phone_number=True
        )
    except Exception as e:
        logger.error(f"Payment error: {e}")
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.pre_checkout_query_handler(func=lambda query: True)
def process_pre_checkout(pre_checkout_query):
    try:
        chat_id = pre_checkout_query.from_user.id
        if chat_id in orders:
            bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
        else:
            bot.answer_pre_checkout_query(pre_checkout_query.id, ok=False,
                                      error_message="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª")
    except Exception as e:
        logger.error(f"Pre-checkout error: {e}")
        bot.answer_pre_checkout_query(pre_checkout_query.id, ok=False,
                                  error_message="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@bot.message_handler(content_types=['successful_payment'])
def process_successful_payment(message):
    chat_id = message.chat.id
    order = orders.get(chat_id)
    
    if not order:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    price = prices[order['type']][order['side']]
    email = message.successful_payment.order_info.email or "–Ω–µ —É–∫–∞–∑–∞–Ω"
    phone = getattr(message.successful_payment.order_info, 'phone_number', "–Ω–µ —É–∫–∞–∑–∞–Ω")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(chat_id,
                   f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                   f"–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n"
                   f"–¢–∏–ø: {order['type']}\n"
                   f"–°—Ç–æ—Ä–æ–Ω—ã: {order['side']}\n"
                   f"–°—É–º–º–∞: {price} —Ä—É–±.\n"
                   f"Email: {email}\n"
                   f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
                   f"–í–∞—à –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ —Ä–∞–±–æ—Ç—É!",
                   reply_markup=types.ReplyKeyboardRemove())
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
    owner_id = 123456789  # –í–∞—à ID
    bot.send_message(owner_id,
                   f"üí∞ –ù–æ–≤—ã–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑!\n"
                   f"–û—Ç: @{message.from_user.username}\n"
                   f"–¢–∏–ø: {order['type']}\n"
                   f"–°—Ç–æ—Ä–æ–Ω—ã: {order['side']}\n"
                   f"–°—É–º–º–∞: {price} —Ä—É–±.\n"
                   f"Email: {email}\n"
                   f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                   f"ID –ø–ª–∞—Ç–µ–∂–∞: {message.successful_payment.telegram_payment_charge_id}")
    
    # –û—á–∏—Å—Ç–∫–∞ –∑–∞–∫–∞–∑–∞
    if chat_id in orders:
        del orders[chat_id]

@bot.message_handler(func=lambda m: m.text == '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å')
def cancel_order(message):
    chat_id = message.chat.id
    if chat_id in orders:
        del orders[chat_id]
    bot.send_message(chat_id, "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=types.ReplyKeyboardRemove())
    start(message)

@bot.message_handler(func=lambda m: m.text == '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å')
def edit_order(message):
    chat_id = message.chat.id
    if chat_id in orders:
        del orders[chat_id]
    start_order(message)

@bot.message_handler(func=lambda m: m.text == '‚Ü© –ù–∞–∑–∞–¥')
def back_to_menu(message):
    start_order(message)

# ===== –ó–ê–ü–£–°–ö =====
if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.polling(none_stop=True)